import { Mirror as NodeMirror } from 'rrweb-snapshot';
import type { canvasMutationData, canvasEventWithTime, inputData, scrollData } from 'rrweb/src/types';
import type { IRRNode } from './document';
import type { Mirror } from '.';
export declare type ReplayerHandler = {
    mirror: NodeMirror;
    applyCanvas: (canvasEvent: canvasEventWithTime, canvasMutationData: canvasMutationData, target: HTMLCanvasElement) => void;
    applyInput: (data: inputData) => void;
    applyScroll: (data: scrollData, isSync: boolean) => void;
};
export declare function diff(oldTree: Node, newTree: IRRNode, replayer: ReplayerHandler, rrnodeMirror?: Mirror): void;
export declare function createOrGetNode(rrNode: IRRNode, domMirror: NodeMirror, rrnodeMirror: Mirror): Node;
export declare function getNestedRule(rules: CSSRuleList, position: number[]): CSSGroupingRule;
export declare enum StyleRuleType {
    Insert = 0,
    Remove = 1,
    Snapshot = 2,
    SetProperty = 3,
    RemoveProperty = 4
}
declare type InsertRule = {
    cssText: string;
    type: StyleRuleType.Insert;
    index?: number | number[];
};
declare type RemoveRule = {
    type: StyleRuleType.Remove;
    index: number | number[];
};
declare type SetPropertyRule = {
    type: StyleRuleType.SetProperty;
    index: number[];
    property: string;
    value: string | null;
    priority: string | undefined;
};
declare type RemovePropertyRule = {
    type: StyleRuleType.RemoveProperty;
    index: number[];
    property: string;
};
export declare type VirtualStyleRules = Array<InsertRule | RemoveRule | SetPropertyRule | RemovePropertyRule>;
export declare function getPositionsAndIndex(nestedIndex: number[]): {
    positions: number[];
    index: number | undefined;
};
export declare function applyVirtualStyleRulesToNode(styleNode: HTMLStyleElement, virtualStyleRules: VirtualStyleRules): void;
export {};
